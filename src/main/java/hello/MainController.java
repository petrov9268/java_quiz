package hello;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import java.util.List;

import hello.Lesson;
import hello.LessonRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /course (after Application path)
public class MainController {
	@Autowired // This means to get the bean called lessonRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private LessonRepository lessonRepository;

	@GetMapping(path="course")
    public String showCoursePage(Model model) {
		Page<Lesson> pg = getPage(0, 10);
		model.addAttribute("lessons", pg.getContent());
        return "course";
    }
	
	@GetMapping(path="course/add") // Map ONLY GET Requests
	public @ResponseBody String addLesson (@RequestParam String title, @RequestParam String text) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request
		Lesson ls = new Lesson();
		ls.setTitle(title);
		ls.setLessonText(text);
		lessonRepository.save(ls);
		return "Saved";
	}

	@GetMapping(path="course/all")
	public @ResponseBody Iterable<Lesson> getAllLessons() {
		// This returns a JSON or XML with the lessons
		return lessonRepository.findAll();
	}
	
	@GetMapping(path="course/test")
	public @ResponseBody Page<Lesson> getListOfLessons() {
		// This returns a JSON or XML with the lessons
		return getPage(0, 10);
	}
	
	@GetMapping(path="course/show")
    public String showPage(@RequestParam int page, Model model) {
        String title = new String("");
		String lessonText = new String("");
		for (Lesson ls : getPage(page).getContent()) {
			title = ls.getTitle();
			lessonText = ls.getLessonText();
		}
		model.addAttribute("lessonTitle", title);
		model.addAttribute("lessonText", lessonText);
		return "show";
    }
	
	public Page<Lesson> getPage(int page) {
		return lessonRepository.findAll(new PageRequest(page, 1));
	}
	
	public Page<Lesson> getPage(int page, int size) {
		return lessonRepository.findAll(new PageRequest(page, size));
	}
	
	@GetMapping(path="course/delete")
	public @ResponseBody String deleteLesson(@RequestParam Long id) {
		lessonRepository.deleteById(id);
		return "Deleted";
	}
	
	@GetMapping(path="course/update")
	public @ResponseBody String updateLesson(@RequestParam Long id,
											 @RequestParam String title,
											 @RequestParam String text) {
		Lesson ls = lessonRepository.findById(id).get();
		ls.setTitle(title);
		ls.setLessonText(text);
		lessonRepository.save(ls);
		return "Updated";
	}
}
