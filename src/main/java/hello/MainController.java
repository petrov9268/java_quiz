package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import java.util.List;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import hello.Lesson;
import hello.LessonRepository;
import hello.Comments;
import hello.CommentsRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/course") // This means URL's start with /course (after Application path)
public class MainController {
	@Autowired // This means to get the bean called lessonRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private LessonRepository lessonRepository;
	@Autowired
	private CommentsRepository commentsRepository;
	private String msg;
	private String buf;

	//course main page
	@GetMapping(path="")
    public String showCoursePage(@RequestParam(value = "page", required = false) Integer page,
								Model model) {
		Page<Lesson> pg;
		if (page != null) {
			pg = getPage(page, 10);
			if (!pg.hasContent()) {
				return "redirect:/course"; //do a proper 404 page
			}
		}
		else {
			pg = getPage(0, 10);
		}
		model.addAttribute("lessons", pg.getContent());
		model.addAttribute("currPage", pg.getNumber());
		model.addAttribute("isFirst", pg.isFirst());
		model.addAttribute("isLast", pg.isLast());
        return "course";
    }
	
	//edit page
	//retrieve data from db
	@GetMapping(path = "/edit")
	public String showEditPage(@RequestParam(value = "page", required = false) Integer page, 
											 Model model) {
		model.addAttribute("currPage", page);
		model.addAttribute("checked", false);
		if (page != null) {
			Page<Lesson> pg = getPage(page);
			if (!pg.hasContent()) {
				return "redirect:"; //do a proper 404 page
			}
			Lesson ls = getLessonFromPage(getPage(page));
			model.addAttribute("lessonTitle", ls.getTitle());
			model.addAttribute("lessonText", ls.getLessonText());
			if (ls.getAnswer() != null) {
				model.addAttribute("checked", true);
				model.addAttribute("question", ls.getQuestion());
				model.addAttribute("option1", ls.getOption1());
				model.addAttribute("option2", ls.getOption2());
				model.addAttribute("option3", ls.getOption3());
				model.addAttribute("answer", ls.getAnswer());
			}
		}
		return "edit";
	}
	
	//add update with or without question
	@PostMapping(path = "/edit")
	public String addLesson(@RequestParam(value = "page", required = false) Integer page,
							@RequestParam String title,
							@RequestParam String lessonText) {
		saveLesson(createLesson(page), title.trim(), lessonText.trim(), null, null,
							null, null, null);
		return "redirect:/course/show?page=" + this.buf;	
	}
	
	@PostMapping(path = "/edit", params = "quiz")
	public String addLesson(@RequestParam(value = "page", required = false) Integer page,
							@RequestParam String title,
							@RequestParam String lessonText,
							@RequestParam String question,
							@RequestParam Integer answer,
							@RequestParam String option1,
							@RequestParam String option2,
							@RequestParam String option3) {
		saveLesson(createLesson(page), title.trim(), lessonText.trim(), question.trim(), answer,
							option1.trim(), option2.trim(), option3.trim());
		return "redirect:/course/show?page=" + this.buf;	
	}
	
	//delete
	@PostMapping(path = "/edit", params = "delete")
	public String deleteLesson(@RequestParam int page) {
		lessonRepository.deleteById(getPageId(page));
		return "redirect:";
	}
	
	//lessons pages
	//show
	@GetMapping(path="/show")
    public String showPage(@RequestParam int page, Model model) {
        Page<Lesson> pg = getPage(page);
		if (!pg.hasContent()) {
			return "redirect:"; //do a proper 404 page
		}
		String title = new String("");
		String lessonText = new String("");
		Lesson ls = getLessonFromPage(pg);
		model.addAttribute("lessonTitle", ls.getTitle());
		model.addAttribute("lessonText", ls.getLessonText());
		model.addAttribute("currPage", page);
		if (ls.getAnswer() != null) {
			model.addAttribute("question", ls.getQuestion());
			model.addAttribute("option1", ls.getOption1());
			model.addAttribute("option2", ls.getOption2());
			model.addAttribute("option3", ls.getOption3());
			if (this.msg != null) {
				showMessage(model);
			}
		}
		model.addAttribute("isFirst", pg.isFirst());
		model.addAttribute("isLast", pg.isLast());
		model.addAttribute("lessonComments", ls.getLessonComments());
		return "show";
    }
	
	//update
	@PostMapping(path="/show")
	public String postComment(@RequestParam int page,
							  @RequestParam String name,
							  @RequestParam String comment) {
		Comments cm = new Comments();
		cm.setLessonId(getPageId(page));
		DateTimeFormatter df = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
		cm.setDate(LocalDateTime.now().format(df));
		cm.setName(name);
		cm.setComment(comment.trim());
		commentsRepository.save(cm);
		return "redirect:/course/show?page=" + page;
	}
	
	//check user answer
	@PostMapping(path = "/show", params = "option")
	public String checkAnswer(@RequestParam int page,
								@RequestParam int option) {
		if (option == getLessonFromPage(getPage(page)).getAnswer()) {
			this.msg = "Correct!";
		}
		else {
			this.msg = "Incorrect!";
		}
		return "redirect:/course/show?page=" + page;
	}
	
	public Page<Lesson> getPage(int page) {
		return lessonRepository.findAll(new PageRequest(page, 1));
	}
	
	public Page<Lesson> getPage(int page, int size) {
		return lessonRepository.findAll(new PageRequest(page, size));
	}
	
	public Long getPageId(int page) {
		return getLessonFromPage(getPage(page)).getId();
	}
	
	public void showMessage(Model model) {
		model.addAttribute("msg", this.msg);
		this.msg = null;
	}
	
	public Lesson getLessonFromPage(Page<Lesson> pg) {
		return pg.getContent().get(0);
	}
	
	public Lesson createLesson(Integer page) {
		Lesson ls;
		if (page != null) {
			ls = getLessonFromPage(getPage(page));
			this.buf = page.toString();
		}
		else {
			ls = new Lesson();
			Long n = lessonRepository.count();
			this.buf = n.toString();
		}
		return ls;
	}
	
		public void saveLesson(Lesson ls, String title,	String lessonText,
								String question, Integer answer, String option1,
								String option2,	String option3) {
		ls.setTitle(title);
		ls.setLessonText(lessonText);
		ls.setAnswer(answer);
		ls.setQuestion(question);
		ls.setOption1(option1);
		ls.setOption2(option2);
		ls.setOption3(option3);
		lessonRepository.save(ls);
	}
}
