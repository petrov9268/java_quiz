package hello;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import java.util.List;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;

import hello.Lesson;
import hello.LessonRepository;
import hello.Comments;
import hello.CommentsRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/") // This means URL's start with /course (after Application path)
public class MainController {
	@Autowired // This means to get the bean called lessonRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private LessonRepository lessonRepository;
	@Autowired
	private CommentsRepository commentsRepository;
	private String msg;

	@GetMapping(path="course")
    public String showCoursePage(Model model) {
		Page<Lesson> pg = getPage(0, 10);
		model.addAttribute("hasContent", pg.hasContent());
		if (pg.hasContent()) {
			model.addAttribute("lessons", pg.getContent());
		}
        return "course";
    }
	
	@GetMapping(path = "course/edit")
	public String showEditPage(@RequestParam(value = "page", required = false) Integer page, 
											 Model model) {
		model.addAttribute("currPage", page);
		if (page != null) {
			Lesson ls = getLessonFromPage(getPage(page));
			model.addAttribute("lessonTitle", ls.getTitle());
			model.addAttribute("lessonText", ls.getLessonText());
			model.addAttribute("question", ls.getQuestion());
			model.addAttribute("option1", ls.getOption1());
			model.addAttribute("option2", ls.getOption2());
			model.addAttribute("option3", ls.getOption3());
			if (ls.getAnswer() != null) {
				model.addAttribute("checked", true);
			}
		}
		return "edit";
	}
	
	@PostMapping(path = "course/edit")
	public String addLesson(@RequestParam(value = "page", required = false) Integer page,
							@RequestParam String title,
							@RequestParam String lessonText) {
		if (page != null) {
			Page<Lesson> pg = getPage(page);
			if (!pg.hasContent()) {
				return "redirect:"; //do a proper 404 page
			}
			Lesson ls = getLessonFromPage(pg);
			ls.setTitle(title);
			ls.setLessonText(lessonText);
			lessonRepository.save(ls);
			return "redirect:/course/show?page=" + page;	
		}
		Lesson ls = new Lesson();
		ls.setTitle(title);
		ls.setLessonText(lessonText);
		lessonRepository.save(ls);
		return "redirect:/course/show?page=" + (lessonRepository.count() - 1);
	}
	
	@PostMapping(path = "course/edit", params = "delete")
	public String deleteLesson(@RequestParam int page) {
		lessonRepository.deleteById(getPageId(page));
		return "redirect:";
	}
	
	@PostMapping(path = "course/show", params = "option")
	public String checkAnswer(@RequestParam int page,
								@RequestParam int option) {
		if (option == getLessonFromPage(getPage(page)).getAnswer()) {
			this.msg = "Correct!";
		}
		else {
			this.msg = "Incorrect!";
		}
		return "redirect:/course/show?page=" + page;
	}
	
	@GetMapping(path="course/show")
    public String showPage(@RequestParam int page, Model model) {
        Page<Lesson> pg = getPage(page);
		if (!pg.hasContent()) {
			return "redirect:"; //do a proper 404 page
		}
		String title = new String("");
		String lessonText = new String("");
		Lesson ls = getLessonFromPage(pg);
		model.addAttribute("lessonTitle", ls.getTitle());
		model.addAttribute("lessonText", ls.getLessonText());
		model.addAttribute("currPage", page);
		if (ls.getAnswer() != null) {
			model.addAttribute("question", ls.getQuestion());
			model.addAttribute("option1", ls.getOption1());
			model.addAttribute("option2", ls.getOption2());
			model.addAttribute("option3", ls.getOption3());
			if (msg != null) {
				showMessage(model);
			}
		}
		if (!pg.isFirst()) {
			model.addAttribute("prevPage", page - 1);
		}
		if (!pg.isLast()) {
			model.addAttribute("nextPage", page + 1);
		}
		model.addAttribute("lessonComments", ls.getLessonComments());
		return "show";
    }
	
	@PostMapping(path="course/show")
	public String postComment(@RequestParam int page,
							  @RequestParam String name,
							  @RequestParam String comment) {
		Comments cm = new Comments();
		cm.setLessonId(getPageId(page));
		DateTimeFormatter df = DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm");
		cm.setDate(LocalDateTime.now().format(df));
		cm.setName(name);
		cm.setComment(comment);
		commentsRepository.save(cm);
		return "redirect:/course/show?page=" + page;
	}
	
	public Page<Lesson> getPage(int page) {
		return lessonRepository.findAll(new PageRequest(page, 1));
	}
	
	public Page<Lesson> getPage(int page, int size) {
		return lessonRepository.findAll(new PageRequest(page, size));
	}
	
	public Long getPageId(int page) {
		return getLessonFromPage(getPage(page)).getId();
	}
	
	public void showMessage(Model model) {
		model.addAttribute("msg", this.msg);
		this.msg = new String();
	}
	
	public Lesson getLessonFromPage(Page<Lesson> pg) {
		return pg.getContent().get(0);
	}
}
